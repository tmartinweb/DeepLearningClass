# -*- coding: utf-8 -*-
"""Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ig5DKlptbyiJ-SUQPIvdgEkycqOqIbo-
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

train = pd.read_csv('rest_data.csv')
train2 = pd.read_csv('rest_data.csv')

"""# handling missing value"""

# data = train.select_dtypes(include=[np.number]).interpolate().dropna()

"""# Categorize non-numeric features"""

non_num_list = ['City Group', 'Type']
for feature in non_num_list:
    train[feature] = pd.Categorical(train[feature])
    train[feature] = train[feature].cat.codes

"""# Build a linear model"""

y = train.pop('revenue')
X = train.drop(['Id'], axis=1)
print(X.head())

"""# FIRST FOR ALL FEATURES"""

"""# Train Test Split"""

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, random_state=42, test_size=.33)

"""## Fit Linear Model"""

from sklearn import linear_model
lr1 = linear_model.LinearRegression()
model1 = lr1.fit(X_train, y_train)

"""# Evaluate the performance and visualize results"""

print("R^2 is: \n", model1.score(X_test, y_test))

"""# Predict in testing data"""

predictions = model1.predict(X_test)

from sklearn.metrics import mean_squared_error
print ('RMSE is: \n', np.sqrt(mean_squared_error(y_test, predictions)))

"""# visualize"""

actual_values = y_test
plt.scatter(predictions, actual_values, alpha=.75,
            color='b') #alpha helps to show overlapping data
plt.xlabel('Predicted Price')
plt.ylabel('Actual Price')
plt.title('Linear Regression Model')
plt.show()

"""# SECOND FOR TOP-5 FEATURES"""

"""# Remove all but top-5 features"""

numeric_features = train2.select_dtypes(include=[np.number])
corr = numeric_features.corr()
print(corr['revenue'].sort_values(ascending=False)[:6], '\n')
quality_pivot = train2.pivot_table(index='P2', values='revenue', aggfunc=np.median)
print(quality_pivot)

quality_pivot.plot(kind='bar', color='blue')
plt.xlabel('P2')
plt.ylabel('Median Revenue')
plt.xticks(rotation=0)
plt.show()

top_5_list = ['P2', 'P28', 'P6', 'P21', 'P11', 'revenue']
rest_list = []
for feature in train2.columns:
    if feature not in top_5_list:
        rest_list.append(feature)
print(train2.head())
for column in rest_list:
    train2.drop(columns=column, inplace=True)

print(train2.head())

"""# Build a linear model"""

y2 = train2.pop('revenue')
X2 = train2

X_train2, X_test2, y_train2, y_test2 = train_test_split(X2, y2, random_state=42, test_size=.1)

"""## Fit Linear Model"""


lr2 = linear_model.LinearRegression()
model2 = lr2.fit(X_train2, y_train2)

"""# Evaluate the performance and visualize results"""

print("R^2 is: \n", model2.score(X_test2, y_test2))

"""# Predict in testing data"""

predictions2 = model2.predict(X_test2)

print('RMSE is: \n', np.sqrt(mean_squared_error(y_test2, predictions2)))

"""# visualize"""

plt.scatter(predictions2, y_test2, alpha=.75,
            color='b') #alpha helps to show overlapping data
plt.xlabel('Predicted Price')
plt.ylabel('Actual Price')
plt.title('Linear Regression Model')
plt.show()
