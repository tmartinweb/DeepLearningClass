# -*- coding: utf-8 -*-
"""sentiment_analysis.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12o0UbjFSf5uUZIYwfhdTjxiHylqI0w0S
"""

from keras.models import Sequential
from keras.layers import Dense, Embedding, Flatten
from keras.preprocessing.text import Tokenizer
from keras.preprocessing.sequence import pad_sequences
import pandas as pd
from sklearn import preprocessing
from sklearn.model_selection import train_test_split
import numpy as np
from sklearn.model_selection import GroupShuffleSplit
from sklearn.datasets import fetch_20newsgroups

imdb = False
embed = True

if imdb:
    df = pd.read_csv('imdb_master.csv', encoding='latin-1')
    # Drop rows for unsupervised training
    df.drop(df[df['label'] == 'unsup'].index, inplace=True)

    sentences = df['review'].values
    y = df['label'].values
    groups = df['type'].values
else:
    sentences, y = fetch_20newsgroups(subset='all', shuffle=True, remove=('headers', 'footers'), return_X_y=True)

"""tokenizing data"""

tokenizer = Tokenizer(num_words=2000)
tokenizer.fit_on_texts(sentences)

"""getting the vocabulary of data"""

# sentences = tokenizer.texts_to_matrix(sentences)

# Prepare text for embedding
max_review_len = max([len(s.split()) for s in sentences])
vocab_size = len(tokenizer.word_index)+1
sentences = tokenizer.texts_to_sequences(sentences)
padded_docs = pad_sequences(sentences, maxlen=max_review_len)

if imdb:
    le = preprocessing.LabelEncoder()
    y = le.fit_transform(y)
    groups = le.fit_transform(groups)

    # Group X/y train/test by 'type' feature
    gss = GroupShuffleSplit(n_splits=2, train_size=.5, random_state=1000)
    indices, dunno = gss.split(padded_docs, y=y, groups=groups)

    X_train = pd.DataFrame(padded_docs).iloc[indices[1]]
    y_train = pd.DataFrame(y).iloc[indices[1]]

    X_test = pd.DataFrame(padded_docs).iloc[indices[0]]
    y_test = pd.DataFrame(y).iloc[indices[0]]
else:
    X_train, X_test, y_train, y_test = train_test_split(padded_docs, y, test_size=0.25, random_state=1000)

model = Sequential()
if embed:
    model.add(Embedding(vocab_size, 50, input_length=max_review_len))
    model.add(Flatten())
    if imdb:
        model.add(Dense(1, activation='sigmoid'))  # 1 and sigmoid because this is a binary classifier
        model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])
    else:
        model.add(Dense(20, activation='softmax'))  # 20 and softmax because this is a non-binary classifier
        model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['acc'])
else:
    input_dim = len(padded_docs[0])  # len of input vectors
    model.add(Dense(300, input_dim=input_dim, activation='relu'))
    if imdb:
        model.add(Dense(1, activation='sigmoid'))  # 1 and sigmoid because this is a binary classifier
        model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['acc'])
    else:
        model.add(Dense(20, activation='softmax'))  # 20 and softmax because this is a non-binary classifier
        model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['acc'])

history = model.fit(X_train, y_train, epochs=5, verbose=True, validation_data=(X_test, y_test), batch_size=256)


# Plot the loss and accuracy of both training and test data
import matplotlib.pyplot as plt

# print(history.history.keys())

plt.plot(history.history['loss'], label='train loss')
plt.plot(history.history['val_loss'], label='val loss')
plt.title('Model Loss')
plt.ylabel('Loss')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='upper right')
plt.show()

plt.plot(history.history['acc'], label='train accuracy')
plt.plot(history.history['val_acc'], label='test accuracy')
plt.title('Model accuracy')
plt.ylabel('Accuracy')
plt.xlabel('Epoch')
plt.legend(['Train', 'Test'], loc='lower right')
plt.show()
